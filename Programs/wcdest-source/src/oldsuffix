
/* 	$Id$	 */


int SKIPPED=0;

#define SYMMETRIC 0
#define WORDSTATS 0


#ifndef lint
static char vcid[] = "$Id$";
#endif /* lint */


#include "common.h"
#include "wcd.h"
#include "d2.h"

#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/mman.h>
#import "math.h"


#define BLOCKFLAG (1<<30)
#define BLOCKMASK (BLOCKFLAG-1)
#define SA_LEN 10
#define lineBlockSize 32

//#define HIST_MAX  100000
//
//int histo [HIST_MAX];
//int maxhist=0;

extern int boost;
extern int ignore_active;
extern int word_len;
extern int window_len;
extern int num_seqs;
extern int alpha;
extern int beta;

extern SeqPtr       data;
extern SeqInfoPtr   seqInfo;
extern UnionFindPtr tree;
extern int theta;
extern int suffix_len;
extern int NUM_num_matches, total_matches, NUM_dfn;

int size1, * line;
char * sequences;


int *sa, *inv, * cout, * lftind, * rgtind, *count;
#ifdef SYMMETRIC
int *j_lftind, *j_rgtind;
#endif

int sarrayFileSize;
int *candidates, *matches;
int indices;
int glob_bmax=0;


#ifdef WORDSTATS
unsigned long long eta=0,etasq=0;
long int   num_unique_words=0,bsize,total=0;
int   totcands=0;
int   table[32];
#endif  



#define BUFFLEN 8000
#define BUFFSIZE   (BUFFLEN*4)


int read_int() {  
  // read the next integer from the suffix array file
  char conv[4];
  int ans;
  static char buff[BUFFSIZE]; // keep a buffer
  static int k=BUFFSIZE;             // index into buffer
  static int n=BUFFSIZE;       // num bytes read in from buffer
  // check  whether we have used buffer or if empty 
  if (k>=n) { // buffer must be exhausted
    // check if last time we read in we hit the end of the file
    if (n<BUFFSIZE) return -1; 
    // now read in the buffer
    n=read(indices,buff,BUFFSIZE);
    if (n<4) return -1;
    k=0;
  }
#ifdef WORDS_BIGENDIAN
  conv[0]=buff[k+3];
  conv[1]=buff[k+2];
  conv[2]=buff[k+1];
  conv[3]=buff[k+0];
#else
  conv[3]=buff[k+3];
  conv[2]=buff[k+2];
  conv[1]=buff[k+1];
  conv[0]=buff[k+0];
#endif
  k=k+4;
  ans = *((int *) conv);
  return ans;
}



int compare_addr(int *a, int *b) {
  return  *a-*b;
}



void sort_suffix_array(int * sa, int size, int sort) {
  // sort suffix array on sequence position
  int curr_word,i,bsize,curr_ind,k;
  char www[255];
  curr_word = sa[0];
  i=curr_ind=0;
  // Find each block and then sort each block separately
  while(i<size) {
    while((i < size) && 
          (strncmp((char *) (sequences+curr_word),(char *) (sequences+sa[i]),suffix_len)==0)) {
      if (sa[i]<size/2)
	inv[sa[i]]=curr_ind;
      i++;
    }

    bsize = i-curr_ind;
#ifdef WORDSTATS
    if (bsize>glob_bmax) glob_bmax=bsize;
    eta   = eta+bsize;
    etasq = etasq+((long long) bsize)*bsize;
    num_unique_words++;
#endif
    if ((bsize>1)&&(sort))
      qsort(&sa[curr_ind],bsize,sizeof(int),compare_addr);
    line[sa[curr_ind]] = line[sa[curr_ind]] | BLOCKFLAG;
    curr_ind = i;
    curr_word = sa[i];
  }
  bsize = i-curr_ind;
  if (sort) {
    qsort(&sa[curr_ind],bsize,sizeof(int),compare_addr);
    for(i=0; i<size; i++) {
      if (sa[i]<size/2)
       inv[sa[i]]=i;
    }
  }
  line[sa[i]] = line[sa[i]] | BLOCKFLAG;
}


int get_indices(char * sarray_name,int * sa, int * inv, int * line, int size, int sort) {
  // open suffix array and read it and create inverse
  // returns biggest # times a word is repeated
  int skip,i,k,j, seqnum;


  seqnum=0;
  for(i=0; i<size; i++) {
    line[i]=seqnum%(num_seqs/2);
    if ((int)  sequences[i]==-1) seqnum++;
  }

  // read in suffix array
  indices = open(sarray_name,0,0);
  if (indices<0) {
    perror(sarray_name);
    exit(1);
  }
    
  for(i=0; i<size; i++) {
    k = read_int();
    sa[i]=k;
  }  
  close(indices);

  sort_suffix_array(sa,size,sort);

  k=0;
  for(i=0; i<suffix_len; i++) 
    if (sequences[i]=='X') k++;
  for(i=suffix_len; i<size/2-suffix_len; i++) {
    if (sequences[i]=='X') k++;
    if (sequences[i-suffix_len]=='X') k--;
    if (k>=suffix_len/3) inv[i-suffix_len] = size1;
  }
  j=k=0;
  for(i=0; i<window_len; i++) 
    if (sequences[i]=='X') k++;
  for(i=window_len-suffix_len; i<2*window_len-suffix_len; i++)
    if (sequences[i]=='X') j++;
  for(i=window_len-suffix_len; i<size1/2-suffix_len; i++) {
    if ((j>window_len/4) && (k>window_len/4))
      inv[i]=size1;
    if (sequences[i-1]=='X') k--;
    if (sequences[i]=='X') k++;
    if (sequences[i+window_len-1]=='X') j--;
    if (sequences[i+window_len]=='X') j++;
  }

  
  return 0;
 
}


int scan_next_seq(int i, int q, int * num_mat)  {
  int start_match, curr_match,num_block, j,z=0,where,bsize;
	
  while ((int) sequences[q] != -1) {
    start_match = curr_match = inv[q];  // curr_match points to sa
    // j  is a sequence id

    if (start_match==size1) {
      q++;
      SKIPPED++;
      continue;
    }
    num_block=0;
    while (1) {
      where=sa[curr_match];
      j = line[where] & BLOCKMASK;
      curr_match++;
      if (lftind[j]<0) {
	matches[z]=j;
	z++;
	lftind[j]=rgtind[j]=q;
#ifdef SYMMETRIC
	j_lftind[j]=j_rgtind[j]=where;
#endif	
      } else {
	rgtind[j]=q;
#ifdef SYMMETRIC
	j_lftind[j]=MIN(j_lftind[j],where);
	j_rgtind[j]=MAX(j_rgtind[j],where);
#endif
      }
      count[j]++;
      num_block++;
      if (line[sa[curr_match]] & BLOCKFLAG) break;
    }
    bsize = curr_match-start_match+1;
    q = q+(boost&((bsize>>7)))+1;
  }
  *num_mat=z;
  return q+1;
}



int kl_check_candidates(int i, int num_mat) {
  int r,j;
  // now check for each matching sequence see if good enough match
  int num_cand=0;
  for(r=0; r<num_mat; r++) {
    j = matches[r];
    if ((count[j]>=alpha) && (rgtind[j]-lftind[j]>=beta)
#ifdef SYMMETRIC
        && (j_rgtind[j]-j_lftind[j]>=beta)
#endif
    ) {
      ASSERT(j<num_seqs);
      candidates[num_cand]=j%(num_seqs/2);
      num_cand++;
    }
    count[j] = 0;
    lftind[j]=-1;
  }
  ASSERT(num_cand<num_seqs);

  return num_cand;
	
}


inline
int check_candidates(int i, int num_mat) {
  int r,j;
  // now check for each matching sequence see if good enough match
  int num_cand=0;
  for(r=0; r<num_mat; r++) {
    j = matches[r];
    if ((j>i) && (count[j]>=alpha) && (rgtind[j]-lftind[j]>=beta)
#ifdef SYMMETRIC
        && (j_rgtind[j]-j_lftind[j]>=beta)
#endif
    ) {
      ASSERT(j<num_seqs);
      candidates[num_cand]=j%(num_seqs/2);
      num_cand++;
    }
    count[j] = 0;
    lftind[j]=-1;
  }
#ifdef WORDSTATS
  totcands = totcands+num_cand;
#endif
  ASSERT(num_cand<num_seqs);

  return num_cand;
	
}


void scan_seqs_for_links(FILE * outf, WorkPtr work,
			 int * sa, int * inv,  int * line, int size) {

  int curr_seq=0, i=0, q=0, num_mat=0, j;
  int num_cand=0;
  char word[64];
	
  memset(word,0,60);

  while(q<size/2-suffix_len) {
    i = line[q] & BLOCKMASK;
    fprintf(outf,"%d:",i);
    // work through all words in current sequence
    q=scan_next_seq(i,q,&num_mat);
    // find all very good matches
    num_cand = kl_check_candidates(i,num_mat);

    // for each good match cluster
    if (num_cand>=2) {
      qsort(candidates,num_cand,sizeof(int),compare_addr);
      complete_klink_prep(outf,work,i,candidates,num_cand);
    }
    else
      fprintf(outf,"%d.\n",i);
    curr_seq++;

  }

}

inline
void scan_seqs_for_words(FILE * outf, WorkPtr work,
			 int * sa, int * inv,  
			 int * line, int size) {

  int curr_seq=0, i=0, q=0, num_mat=0, j;
  int num_cand=0;

  while(q<size/2-suffix_len) {
    i = line[q] & BLOCKMASK;

    // work through all words in current sequence
    q=scan_next_seq(i,q,&num_mat);
    // find all very good matches
    num_cand = check_candidates(i,num_mat);

    // for each good match cluster
    if (num_cand >=1) 
      complete_pairwise_cluster(work,i,candidates,num_cand);

    curr_seq++;
  }

}
			
		

void i_do_suffix_cluster (FILE * outf, WorkPtr work) {

  struct stat st;
  int fd;
  int size0, bmax;
  
  char nlcname[512], sarray_name[512];


  lftind = (int *) calloc(num_seqs,sizeof(int));
  rgtind = (int *) calloc(num_seqs,sizeof(int));
  count  = (int *) calloc(num_seqs,sizeof(int));
#ifdef SYMMETRIC
  j_lftind = (int *) calloc(num_seqs,sizeof(int));
  j_rgtind = (int *) calloc(num_seqs,sizeof(int));
#endif

#ifdef WORDSTATS
  memset(table,0,32*sizeof(int));
#endif

	 //memset(histo,0,HIST_MAX*sizeof(int));
  memset(count,0,num_seqs*sizeof(int));
  for (fd=0; fd<num_seqs; fd++) lftind[fd]=-1;
  sprintf(nlcname,"%s.%s",work->filename,"ois");
  sprintf(sarray_name,"%s.%s",work->filename,"suf");

  stat(nlcname, &st);
  size0 = st.st_size;
  fd = open(nlcname, 0, 0);
  if (fd == -1) {
    perror(nlcname);
    exit(2);
  }
  size1 = getpagesize() * ((size0 + getpagesize()) / getpagesize());
  sequences =
    mmap((void *) 0, size1, PROT_READ | PROT_WRITE,
	 MAP_PRIVATE, fd, 0);
  if (sequences == MAP_FAILED) {
    printf("mmap() failed on the data file\n");
    exit(2);
  }
  sequences[size0]=-1;


  sa   = (int *) calloc(size0+sizeof(int), sizeof(int));   // elts at least log(mn) bits
  inv  = (int *) calloc(size1/2, sizeof(int));
  line = (int*)  calloc(size0+sizeof(int), sizeof(int));  // elts at least log(n) bits
 
  get_indices(sarray_name,sa,inv,line,size0,outf==NULL);
  
  candidates = (int *) calloc(num_seqs,sizeof(int));
  matches    = (int *) calloc(num_seqs+16,sizeof(int));

  if (outf == NULL)
    scan_seqs_for_words(outf,work,sa,inv,line,size0);
  else
    scan_seqs_for_links(outf,work,sa,inv,line,size0);

  num_seqs=num_seqs/2;

#ifdef WORDSTATS
   printf("%s suffixlen %d numseqs %d uniquewords %d eta %ld %6.4f  etasq %ld %6.4f etamax %d totcands %d NUMM %d D2calls %d d2succ %d\n ",
	  work->filename,
	  suffix_len,num_seqs,num_unique_words,
	  eta,1.0*eta/num_unique_words, etasq,1.0*etasq/num_unique_words,glob_bmax,totcands,
      NUM_num_matches,NUM_dfn,total_matches);
  printf("etaseq=%ld, gamma=%5.3f etasq=%6.3f\n",etasq,1.0*num_unique_words/size0,1.0*etasq/num_unique_words);
   printf("SKIPPED %d\n",SKIPPED);
#endif

}



void do_suffix_cluster (WorkPtr work) {
  FILE *outf=NULL;
  i_do_suffix_cluster(outf,work);
}

void do_kseed_suffixcluster(FILE *outf, WorkPtr work) {
  i_do_suffix_cluster(outf,work);
}


void  suffix(WorkPtr work, int s1, int s2, int rcflag) {
  // dummy -- this is nevery called but we do use it
  // in wcd.c to assign to do_cluster. We can then test
  // do_cluster to check what to do
  return;
}
